{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _slicedToArray from \"/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/**\n * marked v6.0.0 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nvar __accessCheck = function __accessCheck(obj, member, msg) {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateAdd = function __privateAdd(obj, member, value) {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateMethod = function __privateMethod(obj, member, method) {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/defaults.ts\nfunction _getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: \"\",\n    highlight: null,\n    hooks: null,\n    langPrefix: \"language-\",\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\nvar _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n  _defaults = newDefaults;\n}\n\n// src/helpers.ts\nvar escapeTest = /[&<>\"']/;\nvar escapeReplace = new RegExp(escapeTest.source, \"g\");\nvar escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nvar escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, \"g\");\nvar escapeReplacements = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\"\n};\nvar getEscapeReplacement = function getEscapeReplacement(ch) {\n  return escapeReplacements[ch];\n};\nfunction _escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html;\n}\nvar unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n  return html.replace(unescapeTest, function (_, n) {\n    n = n.toLowerCase();\n    if (n === \"colon\") return \":\";\n    if (n.charAt(0) === \"#\") {\n      return n.charAt(1) === \"x\" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n    return \"\";\n  });\n}\nvar caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n  regex = typeof regex === \"string\" ? regex : regex.source;\n  opt = opt || \"\";\n  var obj = {\n    replace: function replace(name, val) {\n      val = typeof val === \"object\" && \"source\" in val ? val.source : val;\n      val = val.replace(caret, \"$1\");\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: function getRegex() {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\nvar nonWordAndColonTest = /[^\\w:]/g;\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    var prot;\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, \"\").toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf(\"javascript:\") === 0 || prot.indexOf(\"vbscript:\") === 0 || prot.indexOf(\"data:\") === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, \"%\");\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\nvar baseUrls = {};\nvar justDomain = /^[^:]+:\\/*[^/]*$/;\nvar protocol = /^([^:]+:)[\\s\\S]*$/;\nvar domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\nfunction resolveUrl(base, href) {\n  if (!baseUrls[\" \" + base]) {\n    if (justDomain.test(base)) {\n      baseUrls[\" \" + base] = base + \"/\";\n    } else {\n      baseUrls[\" \" + base] = rtrim(base, \"/\", true);\n    }\n  }\n  base = baseUrls[\" \" + base];\n  var relativeBase = base.indexOf(\":\") === -1;\n  if (href.substring(0, 2) === \"//\") {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, \"$1\") + href;\n  } else if (href.charAt(0) === \"/\") {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, \"$1\") + href;\n  } else {\n    return base + href;\n  }\n}\nvar noopTest = {\n  exec: function exec() {\n    return null;\n  }\n};\nfunction splitCells(tableRow, count) {\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n      var escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === \"\\\\\") escaped = !escaped;\n      if (escaped) {\n        return \"|\";\n      } else {\n        return \" |\";\n      }\n    }),\n    cells = row.split(/ \\|/);\n  var i = 0;\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push(\"\");\n  }\n  for (; i < cells.length; i++) {\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, \"|\");\n  }\n  return cells;\n}\nfunction rtrim(str, c, invert) {\n  var l = str.length;\n  if (l === 0) {\n    return \"\";\n  }\n  var suffLen = 0;\n  while (suffLen < l) {\n    var currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  var l = str.length;\n  var level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === \"\\\\\") {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\nfunction checkDeprecations(opt, callback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n  if (callback) {\n    console.warn(\"marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async\");\n  }\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn(\"marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options\");\n  }\n  if (opt.highlight || opt.langPrefix !== \"language-\") {\n    console.warn(\"marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.\");\n  }\n  if (opt.mangle) {\n    console.warn(\"marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.\");\n  }\n  if (opt.baseUrl) {\n    console.warn(\"marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.\");\n  }\n  if (opt.smartypants) {\n    console.warn(\"marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.\");\n  }\n  if (opt.xhtml) {\n    console.warn(\"marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.\");\n  }\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn(\"marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.\");\n  }\n}\n\n// src/Tokenizer.ts\nfunction outputLink(cap, link, raw, lexer2) {\n  var href = link.href;\n  var title = link.title ? _escape(link.title) : null;\n  var text = cap[1].replace(/\\\\([\\[\\]])/g, \"$1\");\n  if (cap[0].charAt(0) !== \"!\") {\n    lexer2.state.inLink = true;\n    var token = {\n      type: \"link\",\n      raw: raw,\n      href: href,\n      title: title,\n      text: text,\n      tokens: lexer2.inlineTokens(text)\n    };\n    lexer2.state.inLink = false;\n    return token;\n  }\n  return {\n    type: \"image\",\n    raw: raw,\n    href: href,\n    title: title,\n    text: _escape(text)\n  };\n}\nfunction indentCodeCompensation(raw, text) {\n  var matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  var indentToCode = matchIndentToCode[1];\n  return text.split(\"\\n\").map(function (node) {\n    var matchIndentInNode = node.match(/^\\s+/);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    var _matchIndentInNode = _slicedToArray(matchIndentInNode, 1),\n      indentInNode = _matchIndentInNode[0];\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join(\"\\n\");\n}\nvar _Tokenizer = /*#__PURE__*/function () {\n  function _Tokenizer(options2) {\n    _classCallCheck(this, _Tokenizer);\n    this.options = options2 || _defaults;\n  }\n  _createClass(_Tokenizer, [{\n    key: \"space\",\n    value: function space(src) {\n      var cap = this.rules.block.newline.exec(src);\n      if (cap && cap[0].length > 0) {\n        return {\n          type: \"space\",\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"code\",\n    value: function code(src) {\n      var cap = this.rules.block.code.exec(src);\n      if (cap) {\n        var text = cap[0].replace(/^ {1,4}/gm, \"\");\n        return {\n          type: \"code\",\n          raw: cap[0],\n          codeBlockStyle: \"indented\",\n          text: !this.options.pedantic ? rtrim(text, \"\\n\") : text\n        };\n      }\n    }\n  }, {\n    key: \"fences\",\n    value: function fences(src) {\n      var cap = this.rules.block.fences.exec(src);\n      if (cap) {\n        var raw = cap[0];\n        var text = indentCodeCompensation(raw, cap[3] || \"\");\n        return {\n          type: \"code\",\n          raw: raw,\n          lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, \"$1\") : cap[2],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(src) {\n      var cap = this.rules.block.heading.exec(src);\n      if (cap) {\n        var text = cap[2].trim();\n        if (/#$/.test(text)) {\n          var trimmed = rtrim(text, \"#\");\n          if (this.options.pedantic) {\n            text = trimmed.trim();\n          } else if (!trimmed || / $/.test(trimmed)) {\n            text = trimmed.trim();\n          }\n        }\n        return {\n          type: \"heading\",\n          raw: cap[0],\n          depth: cap[1].length,\n          text: text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n  }, {\n    key: \"hr\",\n    value: function hr(src) {\n      var cap = this.rules.block.hr.exec(src);\n      if (cap) {\n        return {\n          type: \"hr\",\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(src) {\n      var cap = this.rules.block.blockquote.exec(src);\n      if (cap) {\n        var text = cap[0].replace(/^ *>[ \\t]?/gm, \"\");\n        var top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        var tokens = this.lexer.blockTokens(text);\n        this.lexer.state.top = top;\n        return {\n          type: \"blockquote\",\n          raw: cap[0],\n          tokens: tokens,\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"list\",\n    value: function list(src) {\n      var cap = this.rules.block.list.exec(src);\n      if (cap) {\n        var raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n        var bull = cap[1].trim();\n        var isordered = bull.length > 1;\n        var list = {\n          type: \"list\",\n          raw: \"\",\n          ordered: isordered,\n          start: isordered ? +bull.slice(0, -1) : \"\",\n          loose: false,\n          items: []\n        };\n        bull = isordered ? \"\\\\d{1,9}\\\\\".concat(bull.slice(-1)) : \"\\\\\".concat(bull);\n        if (this.options.pedantic) {\n          bull = isordered ? bull : \"[*+-]\";\n        }\n        var itemRegex = new RegExp(\"^( {0,3}\".concat(bull, \")((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))\"));\n        while (src) {\n          endEarly = false;\n          if (!(cap = itemRegex.exec(src))) {\n            break;\n          }\n          if (this.rules.block.hr.test(src)) {\n            break;\n          }\n          raw = cap[0];\n          src = src.substring(raw.length);\n          line = cap[2].split(\"\\n\", 1)[0].replace(/^\\t+/, function (t) {\n            return \" \".repeat(3 * t.length);\n          });\n          nextLine = src.split(\"\\n\", 1)[0];\n          if (this.options.pedantic) {\n            indent = 2;\n            itemContents = line.trimLeft();\n          } else {\n            indent = cap[2].search(/[^ ]/);\n            indent = indent > 4 ? 1 : indent;\n            itemContents = line.slice(indent);\n            indent += cap[1].length;\n          }\n          blankLine = false;\n          if (!line && /^ *$/.test(nextLine)) {\n            raw += nextLine + \"\\n\";\n            src = src.substring(nextLine.length + 1);\n            endEarly = true;\n          }\n          if (!endEarly) {\n            var nextBulletRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))\"));\n            var hrRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)\"));\n            var fencesBeginRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:```|~~~)\"));\n            var headingBeginRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}#\"));\n            while (src) {\n              rawLine = src.split(\"\\n\", 1)[0];\n              nextLine = rawLine;\n              if (this.options.pedantic) {\n                nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, \"  \");\n              }\n              if (fencesBeginRegex.test(nextLine)) {\n                break;\n              }\n              if (headingBeginRegex.test(nextLine)) {\n                break;\n              }\n              if (nextBulletRegex.test(nextLine)) {\n                break;\n              }\n              if (hrRegex.test(src)) {\n                break;\n              }\n              if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n                itemContents += \"\\n\" + nextLine.slice(indent);\n              } else {\n                if (blankLine) {\n                  break;\n                }\n                if (line.search(/[^ ]/) >= 4) {\n                  break;\n                }\n                if (fencesBeginRegex.test(line)) {\n                  break;\n                }\n                if (headingBeginRegex.test(line)) {\n                  break;\n                }\n                if (hrRegex.test(line)) {\n                  break;\n                }\n                itemContents += \"\\n\" + nextLine;\n              }\n              if (!blankLine && !nextLine.trim()) {\n                blankLine = true;\n              }\n              raw += rawLine + \"\\n\";\n              src = src.substring(rawLine.length + 1);\n              line = nextLine.slice(indent);\n            }\n          }\n          if (!list.loose) {\n            if (endsWithBlankLine) {\n              list.loose = true;\n            } else if (/\\n *\\n *$/.test(raw)) {\n              endsWithBlankLine = true;\n            }\n          }\n          if (this.options.gfm) {\n            istask = /^\\[[ xX]\\] /.exec(itemContents);\n            if (istask) {\n              ischecked = istask[0] !== \"[ ] \";\n              itemContents = itemContents.replace(/^\\[[ xX]\\] +/, \"\");\n            }\n          }\n          list.items.push({\n            type: \"list_item\",\n            raw: raw,\n            task: !!istask,\n            checked: ischecked,\n            loose: false,\n            text: itemContents\n          });\n          list.raw += raw;\n        }\n        list.items[list.items.length - 1].raw = raw.trimRight();\n        list.items[list.items.length - 1].text = itemContents.trimRight();\n        list.raw = list.raw.trimRight();\n        var l = list.items.length;\n        for (i = 0; i < l; i++) {\n          this.lexer.state.top = false;\n          list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n          if (!list.loose) {\n            var spacers = list.items[i].tokens.filter(function (t) {\n              return t.type === \"space\";\n            });\n            var hasMultipleLineBreaks = spacers.length > 0 && spacers.some(function (t) {\n              return /\\n.*\\n/.test(t.raw);\n            });\n            list.loose = hasMultipleLineBreaks;\n          }\n        }\n        if (list.loose) {\n          for (i = 0; i < l; i++) {\n            list.items[i].loose = true;\n          }\n        }\n        return list;\n      }\n    }\n  }, {\n    key: \"html\",\n    value: function html(src) {\n      var cap = this.rules.block.html.exec(src);\n      if (cap) {\n        var token = {\n          type: \"html\",\n          block: true,\n          raw: cap[0],\n          pre: !this.options.sanitizer && (cap[1] === \"pre\" || cap[1] === \"script\" || cap[1] === \"style\"),\n          text: cap[0]\n        };\n        if (this.options.sanitize) {\n          var text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]);\n          var paragraph = token;\n          paragraph.type = \"paragraph\";\n          paragraph.text = text;\n          paragraph.tokens = this.lexer.inline(text);\n        }\n        return token;\n      }\n    }\n  }, {\n    key: \"def\",\n    value: function def(src) {\n      var cap = this.rules.block.def.exec(src);\n      if (cap) {\n        var tag = cap[1].toLowerCase().replace(/\\s+/g, \" \");\n        var href = cap[2] ? cap[2].replace(/^<(.*)>$/, \"$1\").replace(this.rules.inline._escapes, \"$1\") : \"\";\n        var title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, \"$1\") : cap[3];\n        return {\n          type: \"def\",\n          tag: tag,\n          raw: cap[0],\n          href: href,\n          title: title\n        };\n      }\n    }\n  }, {\n    key: \"table\",\n    value: function table(src) {\n      var cap = this.rules.block.table.exec(src);\n      if (cap) {\n        var item = {\n          type: \"table\",\n          // splitCells expects a number as second argument\n          // @ts-expect-error\n          header: splitCells(cap[1]).map(function (c) {\n            return {\n              text: c\n            };\n          }),\n          align: cap[2].replace(/^ *|\\| *$/g, \"\").split(/ *\\| */),\n          rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, \"\").split(\"\\n\") : []\n        };\n        if (item.header.length === item.align.length) {\n          item.raw = cap[0];\n          var l = item.align.length;\n          var i, j, k, row;\n          for (i = 0; i < l; i++) {\n            if (/^ *-+: *$/.test(item.align[i])) {\n              item.align[i] = \"right\";\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\n              item.align[i] = \"center\";\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\n              item.align[i] = \"left\";\n            } else {\n              item.align[i] = null;\n            }\n          }\n          l = item.rows.length;\n          for (i = 0; i < l; i++) {\n            item.rows[i] = splitCells(item.rows[i], item.header.length).map(function (c) {\n              return {\n                text: c\n              };\n            });\n          }\n          l = item.header.length;\n          for (j = 0; j < l; j++) {\n            item.header[j].tokens = this.lexer.inline(item.header[j].text);\n          }\n          l = item.rows.length;\n          for (j = 0; j < l; j++) {\n            row = item.rows[j];\n            for (k = 0; k < row.length; k++) {\n              row[k].tokens = this.lexer.inline(row[k].text);\n            }\n          }\n          return item;\n        }\n      }\n    }\n  }, {\n    key: \"lheading\",\n    value: function lheading(src) {\n      var cap = this.rules.block.lheading.exec(src);\n      if (cap) {\n        return {\n          type: \"heading\",\n          raw: cap[0],\n          depth: cap[2].charAt(0) === \"=\" ? 1 : 2,\n          text: cap[1],\n          tokens: this.lexer.inline(cap[1])\n        };\n      }\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(src) {\n      var cap = this.rules.block.paragraph.exec(src);\n      if (cap) {\n        var text = cap[1].charAt(cap[1].length - 1) === \"\\n\" ? cap[1].slice(0, -1) : cap[1];\n        return {\n          type: \"paragraph\",\n          raw: cap[0],\n          text: text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n  }, {\n    key: \"text\",\n    value: function text(src) {\n      var cap = this.rules.block.text.exec(src);\n      if (cap) {\n        return {\n          type: \"text\",\n          raw: cap[0],\n          text: cap[0],\n          tokens: this.lexer.inline(cap[0])\n        };\n      }\n    }\n  }, {\n    key: \"escape\",\n    value: function escape(src) {\n      var cap = this.rules.inline.escape.exec(src);\n      if (cap) {\n        return {\n          type: \"escape\",\n          raw: cap[0],\n          text: _escape(cap[1])\n        };\n      }\n    }\n  }, {\n    key: \"tag\",\n    value: function tag(src) {\n      var cap = this.rules.inline.tag.exec(src);\n      if (cap) {\n        if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n          this.lexer.state.inLink = true;\n        } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.lexer.state.inLink = false;\n        }\n        if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = true;\n        } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = false;\n        }\n        return {\n          type: this.options.sanitize ? \"text\" : \"html\",\n          raw: cap[0],\n          inLink: this.lexer.state.inLink,\n          inRawBlock: this.lexer.state.inRawBlock,\n          block: false,\n          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"link\",\n    value: function link(src) {\n      var cap = this.rules.inline.link.exec(src);\n      if (cap) {\n        var trimmedUrl = cap[2].trim();\n        if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n          if (!/>$/.test(trimmedUrl)) {\n            return;\n          }\n          var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), \"\\\\\");\n          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n            return;\n          }\n        } else {\n          var lastParenIndex = findClosingBracket(cap[2], \"()\");\n          if (lastParenIndex > -1) {\n            var start = cap[0].indexOf(\"!\") === 0 ? 5 : 4;\n            var linkLen = start + cap[1].length + lastParenIndex;\n            cap[2] = cap[2].substring(0, lastParenIndex);\n            cap[0] = cap[0].substring(0, linkLen).trim();\n            cap[3] = \"\";\n          }\n        }\n        var href = cap[2];\n        var title = \"\";\n        if (this.options.pedantic) {\n          var link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n          if (link) {\n            href = link[1];\n            title = link[3];\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : \"\";\n        }\n        href = href.trim();\n        if (/^</.test(href)) {\n          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n            href = href.slice(1);\n          } else {\n            href = href.slice(1, -1);\n          }\n        }\n        return outputLink(cap, {\n          href: href ? href.replace(this.rules.inline._escapes, \"$1\") : href,\n          title: title ? title.replace(this.rules.inline._escapes, \"$1\") : title\n        }, cap[0], this.lexer);\n      }\n    }\n  }, {\n    key: \"reflink\",\n    value: function reflink(src, links) {\n      var cap;\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n        var link = (cap[2] || cap[1]).replace(/\\s+/g, \" \");\n        link = links[link.toLowerCase()];\n        if (!link) {\n          var text = cap[0].charAt(0);\n          return {\n            type: \"text\",\n            raw: text,\n            text: text\n          };\n        }\n        return outputLink(cap, link, cap[0], this.lexer);\n      }\n    }\n  }, {\n    key: \"emStrong\",\n    value: function emStrong(src, maskedSrc) {\n      var prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n      var match = this.rules.inline.emStrong.lDelim.exec(src);\n      if (!match) return;\n      if (match[3] && prevChar.match(/(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE3F\\uDE40\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDF02\\uDF04-\\uDF10\\uDF12-\\uDF33\\uDF50-\\uDF59\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883\\uD885-\\uD887][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F\\uDC41-\\uDC46]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD32\\uDD50-\\uDD52\\uDD55\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD834[\\uDEC0-\\uDED3\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E\\uDF25-\\uDF2A]|\\uD838[\\uDC30-\\uDC6D\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDCD0-\\uDCEB\\uDCF0-\\uDCF9\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF39\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A\\uDF50-\\uDFFF]|\\uD888[\\uDC00-\\uDFAF])/)) return;\n      var nextChar = match[1] || match[2] || \"\";\n      if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n        var lLength = match[0].length - 1;\n        var rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n        var endReg = match[0][0] === \"*\" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n        endReg.lastIndex = 0;\n        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n        while ((match = endReg.exec(maskedSrc)) != null) {\n          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n          if (!rDelim) continue;\n          rLength = rDelim.length;\n          if (match[3] || match[4]) {\n            delimTotal += rLength;\n            continue;\n          } else if (match[5] || match[6]) {\n            if (lLength % 3 && !((lLength + rLength) % 3)) {\n              midDelimTotal += rLength;\n              continue;\n            }\n          }\n          delimTotal -= rLength;\n          if (delimTotal > 0) continue;\n          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n          var raw = src.slice(0, lLength + match.index + rLength + 1);\n          if (Math.min(lLength, rLength) % 2) {\n            var text2 = raw.slice(1, -1);\n            return {\n              type: \"em\",\n              raw: raw,\n              text: text2,\n              tokens: this.lexer.inlineTokens(text2)\n            };\n          }\n          var text = raw.slice(2, -2);\n          return {\n            type: \"strong\",\n            raw: raw,\n            text: text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n      }\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(src) {\n      var cap = this.rules.inline.code.exec(src);\n      if (cap) {\n        var text = cap[2].replace(/\\n/g, \" \");\n        var hasNonSpaceChars = /[^ ]/.test(text);\n        var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n          text = text.substring(1, text.length - 1);\n        }\n        text = _escape(text, true);\n        return {\n          type: \"codespan\",\n          raw: cap[0],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"br\",\n    value: function br(src) {\n      var cap = this.rules.inline.br.exec(src);\n      if (cap) {\n        return {\n          type: \"br\",\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"del\",\n    value: function del(src) {\n      var cap = this.rules.inline.del.exec(src);\n      if (cap) {\n        return {\n          type: \"del\",\n          raw: cap[0],\n          text: cap[2],\n          tokens: this.lexer.inlineTokens(cap[2])\n        };\n      }\n    }\n  }, {\n    key: \"autolink\",\n    value: function autolink(src, mangle2) {\n      var cap = this.rules.inline.autolink.exec(src);\n      if (cap) {\n        var text, href;\n        if (cap[2] === \"@\") {\n          text = _escape(this.options.mangle ? mangle2(cap[1]) : cap[1]);\n          href = \"mailto:\" + text;\n        } else {\n          text = _escape(cap[1]);\n          href = text;\n        }\n        return {\n          type: \"link\",\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: \"text\",\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"url\",\n    value: function url(src, mangle2) {\n      var cap;\n      if (cap = this.rules.inline.url.exec(src)) {\n        var text, href;\n        if (cap[2] === \"@\") {\n          text = _escape(this.options.mangle ? mangle2(cap[0]) : cap[0]);\n          href = \"mailto:\" + text;\n        } else {\n          var prevCapZero;\n          do {\n            prevCapZero = cap[0];\n            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n          } while (prevCapZero !== cap[0]);\n          text = _escape(cap[0]);\n          if (cap[1] === \"www.\") {\n            href = \"http://\" + cap[0];\n          } else {\n            href = cap[0];\n          }\n        }\n        return {\n          type: \"link\",\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: \"text\",\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"inlineText\",\n    value: function inlineText(src, smartypants2) {\n      var cap = this.rules.inline.text.exec(src);\n      if (cap) {\n        var text;\n        if (this.lexer.state.inRawBlock) {\n          text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];\n        } else {\n          text = _escape(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);\n        }\n        return {\n          type: \"text\",\n          raw: cap[0],\n          text: text\n        };\n      }\n    }\n  }]);\n  return _Tokenizer;\n}();\n\n// src/rules.ts\nvar block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: \"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$))\",\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace(\"label\", block._label).replace(\"title\", block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace(\"bull\", block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace(\"hr\", \"\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))\").replace(\"def\", \"\\\\n+(?=\" + block.def.source + \")\").getRegex();\nblock._tag = \"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\";\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, \"i\").replace(\"comment\", block._comment).replace(\"tag\", block._tag).replace(\"attribute\", / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.lheading = edit(block.lheading).replace(/bull/g, block.bullet).getRegex();\nblock.paragraph = edit(block._paragraph).replace(\"hr\", block.hr).replace(\"heading\", \" {0,3}#{1,6} \").replace(\"|lheading\", \"\").replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", block._tag).getRegex();\nblock.blockquote = edit(block.blockquote).replace(\"paragraph\", block.paragraph).getRegex();\nblock.normal = _objectSpread({}, block);\nblock.gfm = _objectSpread(_objectSpread({}, block.normal), {}, {\n  table: \"^ *([^\\\\n ].*\\\\|.*)\\\\n {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\"\n  // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table).replace(\"hr\", block.hr).replace(\"heading\", \" {0,3}#{1,6} \").replace(\"blockquote\", \" {0,3}>\").replace(\"code\", \" {4}[^\\\\n]\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", block._tag).getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace(\"hr\", block.hr).replace(\"heading\", \" {0,3}#{1,6} \").replace(\"|lheading\", \"\").replace(\"table\", block.gfm.table).replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", block._tag).getRegex();\nblock.pedantic = _objectSpread(_objectSpread({}, block.normal), {}, {\n  html: edit(\"^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\").replace(\"comment\", block._comment).replace(/tag/g, \"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph).replace(\"hr\", block.hr).replace(\"heading\", \" *#{1,6} *[^\\n]\").replace(\"lheading\", block.lheading).replace(\"blockquote\", \" {0,3}>\").replace(\"|fences\", \"\").replace(\"|list\", \"\").replace(\"|html\", \"\").getRegex()\n});\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: \"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: \"reflink|nolink(?!\\\\()\",\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/\n    // ^- Not allowed for _\n  },\n\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n};\ninline._punctuation = \"\\\\p{P}$+<=>`^|~\";\ninline.punctuation = edit(inline.punctuation, \"u\").replace(/punctuation/g, inline._punctuation).getRegex();\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace(\"(?:-->|$)\", \"-->\").getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, \"u\").replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, \"gu\").replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, \"gu\").replace(/punct/g, inline._punctuation).getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, \"gu\").replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = edit(inline._escapes, \"gu\").replace(/punct/g, inline._punctuation).getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace(\"scheme\", inline._scheme).replace(\"email\", inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace(\"comment\", inline._comment).replace(\"attribute\", inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace(\"label\", inline._label).replace(\"href\", inline._href).replace(\"title\", inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace(\"label\", inline._label).replace(\"ref\", block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace(\"ref\", block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, \"g\").replace(\"reflink\", inline.reflink).replace(\"nolink\", inline.nolink).getRegex();\ninline.normal = _objectSpread({}, inline);\ninline.pedantic = _objectSpread(_objectSpread({}, inline.normal), {}, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\", inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\", inline._label).getRegex()\n});\ninline.gfm = _objectSpread(_objectSpread({}, inline.normal), {}, {\n  escape: edit(inline.escape).replace(\"])\", \"~|])\").getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\ninline.gfm.url = edit(inline.gfm.url, \"i\").replace(\"email\", inline.gfm._extended_email).getRegex();\ninline.breaks = _objectSpread(_objectSpread({}, inline.gfm), {}, {\n  br: edit(inline.br).replace(\"{2,}\", \"*\").getRegex(),\n  text: edit(inline.gfm.text).replace(\"\\\\b_\", \"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g, \"*\").getRegex()\n});\n\n// src/Lexer.ts\nfunction smartypants(text) {\n  return text.replace(/---/g, \"\\u2014\").replace(/--/g, \"\\u2013\").replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\").replace(/'/g, \"\\u2019\").replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\").replace(/\"/g, \"\\u201D\").replace(/\\.{3}/g, \"\\u2026\");\n}\nfunction mangle(text) {\n  var out = \"\",\n    i,\n    ch;\n  var l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = \"x\" + ch.toString(16);\n    }\n    out += \"&#\" + ch + \";\";\n  }\n  return out;\n}\nvar _Lexer = /*#__PURE__*/function () {\n  function _Lexer(options2) {\n    _classCallCheck(this, _Lexer);\n    this.tokens = [];\n    this.tokens.links = /* @__PURE__ */Object.create(null);\n    this.options = options2 || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    var rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n  _createClass(_Lexer, [{\n    key: \"lex\",\n    value:\n    /**\n     * Preprocessing\n     */\n    function lex(src) {\n      src = src.replace(/\\r\\n|\\r/g, \"\\n\");\n      this.blockTokens(src, this.tokens);\n      var next;\n      while (next = this.inlineQueue.shift()) {\n        this.inlineTokens(next.src, next.tokens);\n      }\n      return this.tokens;\n    }\n  }, {\n    key: \"blockTokens\",\n    value: function blockTokens(src) {\n      var _this = this;\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      if (this.options.pedantic) {\n        src = src.replace(/\\t/g, \"    \").replace(/^ +$/gm, \"\");\n      } else {\n        src = src.replace(/^( *)(\\t+)/gm, function (_, leading, tabs) {\n          return leading + \"    \".repeat(tabs.length);\n        });\n      }\n      var token, lastToken, cutSrc, lastParagraphClipped;\n      var _loop = function _loop() {\n        if (_this.options.extensions && _this.options.extensions.block && _this.options.extensions.block.some(function (extTokenizer) {\n          if (token = extTokenizer.call({\n            lexer: _this\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n          return \"continue\";\n        }\n        if (token = _this.tokenizer.space(src)) {\n          src = src.substring(token.raw.length);\n          if (token.raw.length === 1 && tokens.length > 0) {\n            tokens[tokens.length - 1].raw += \"\\n\";\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n        if (token = _this.tokenizer.code(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && (lastToken.type === \"paragraph\" || lastToken.type === \"text\")) {\n            lastToken.raw += \"\\n\" + token.raw;\n            lastToken.text += \"\\n\" + token.text;\n            _this.inlineQueue[_this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n        if (token = _this.tokenizer.fences(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this.tokenizer.heading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this.tokenizer.hr(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this.tokenizer.blockquote(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this.tokenizer.list(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this.tokenizer.html(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this.tokenizer.def(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && (lastToken.type === \"paragraph\" || lastToken.type === \"text\")) {\n            lastToken.raw += \"\\n\" + token.raw;\n            lastToken.text += \"\\n\" + token.raw;\n            _this.inlineQueue[_this.inlineQueue.length - 1].src = lastToken.text;\n          } else if (!_this.tokens.links[token.tag]) {\n            _this.tokens.links[token.tag] = {\n              href: token.href,\n              title: token.title\n            };\n          }\n          return \"continue\";\n        }\n        if (token = _this.tokenizer.table(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this.tokenizer.lheading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        cutSrc = src;\n        if (_this.options.extensions && _this.options.extensions.startBlock) {\n          var startIndex = Infinity;\n          var tempSrc = src.slice(1);\n          var tempStart;\n          _this.options.extensions.startBlock.forEach(function (getStartIndex) {\n            tempStart = getStartIndex.call({\n              lexer: _this\n            }, tempSrc);\n            if (typeof tempStart === \"number\" && tempStart >= 0) {\n              startIndex = Math.min(startIndex, tempStart);\n            }\n          });\n          if (startIndex < Infinity && startIndex >= 0) {\n            cutSrc = src.substring(0, startIndex + 1);\n          }\n        }\n        if (_this.state.top && (token = _this.tokenizer.paragraph(cutSrc))) {\n          lastToken = tokens[tokens.length - 1];\n          if (lastParagraphClipped && lastToken.type === \"paragraph\") {\n            lastToken.raw += \"\\n\" + token.raw;\n            lastToken.text += \"\\n\" + token.text;\n            _this.inlineQueue.pop();\n            _this.inlineQueue[_this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          lastParagraphClipped = cutSrc.length !== src.length;\n          src = src.substring(token.raw.length);\n          return \"continue\";\n        }\n        if (token = _this.tokenizer.text(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && lastToken.type === \"text\") {\n            lastToken.raw += \"\\n\" + token.raw;\n            lastToken.text += \"\\n\" + token.text;\n            _this.inlineQueue.pop();\n            _this.inlineQueue[_this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n        if (src) {\n          var errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n          if (_this.options.silent) {\n            console.error(errMsg);\n            return \"break\";\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      };\n      while (src) {\n        var _ret = _loop();\n        if (_ret === \"continue\") continue;\n        if (_ret === \"break\") break;\n      }\n      this.state.top = true;\n      return tokens;\n    }\n  }, {\n    key: \"inline\",\n    value: function inline(src) {\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      this.inlineQueue.push({\n        src: src,\n        tokens: tokens\n      });\n      return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n  }, {\n    key: \"inlineTokens\",\n    value: function inlineTokens(src) {\n      var _this2 = this;\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var token, lastToken, cutSrc;\n      var maskedSrc = src;\n      var match;\n      var keepPrevChar, prevChar;\n      if (this.tokens.links) {\n        var links = Object.keys(this.tokens.links);\n        if (links.length > 0) {\n          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n            if (links.includes(match[0].slice(match[0].lastIndexOf(\"[\") + 1, -1))) {\n              maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n            }\n          }\n        }\n      }\n      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n      }\n      while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + \"++\" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n      }\n      var _loop2 = function _loop2() {\n        if (!keepPrevChar) {\n          prevChar = \"\";\n        }\n        keepPrevChar = false;\n        if (_this2.options.extensions && _this2.options.extensions.inline && _this2.options.extensions.inline.some(function (extTokenizer) {\n          if (token = extTokenizer.call({\n            lexer: _this2\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n          return \"continue\";\n        }\n        if (token = _this2.tokenizer.escape(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this2.tokenizer.tag(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && token.type === \"text\" && lastToken.type === \"text\") {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n        if (token = _this2.tokenizer.link(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this2.tokenizer.reflink(src, _this2.tokens.links)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && token.type === \"text\" && lastToken.type === \"text\") {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n        if (token = _this2.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this2.tokenizer.codespan(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this2.tokenizer.br(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this2.tokenizer.del(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (token = _this2.tokenizer.autolink(src, mangle)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        if (!_this2.state.inLink && (token = _this2.tokenizer.url(src, mangle))) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return \"continue\";\n        }\n        cutSrc = src;\n        if (_this2.options.extensions && _this2.options.extensions.startInline) {\n          var startIndex = Infinity;\n          var tempSrc = src.slice(1);\n          var tempStart;\n          _this2.options.extensions.startInline.forEach(function (getStartIndex) {\n            tempStart = getStartIndex.call({\n              lexer: _this2\n            }, tempSrc);\n            if (typeof tempStart === \"number\" && tempStart >= 0) {\n              startIndex = Math.min(startIndex, tempStart);\n            }\n          });\n          if (startIndex < Infinity && startIndex >= 0) {\n            cutSrc = src.substring(0, startIndex + 1);\n          }\n        }\n        if (token = _this2.tokenizer.inlineText(cutSrc, smartypants)) {\n          src = src.substring(token.raw.length);\n          if (token.raw.slice(-1) !== \"_\") {\n            prevChar = token.raw.slice(-1);\n          }\n          keepPrevChar = true;\n          lastToken = tokens[tokens.length - 1];\n          if (lastToken && lastToken.type === \"text\") {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n          return \"continue\";\n        }\n        if (src) {\n          var errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n          if (_this2.options.silent) {\n            console.error(errMsg);\n            return \"break\";\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      };\n      while (src) {\n        var _ret2 = _loop2();\n        if (_ret2 === \"continue\") continue;\n        if (_ret2 === \"break\") break;\n      }\n      return tokens;\n    }\n  }], [{\n    key: \"rules\",\n    get: function get() {\n      return {\n        block: block,\n        inline: inline\n      };\n    }\n    /**\n     * Static Lex Method\n     */\n  }, {\n    key: \"lex\",\n    value: function lex(src, options2) {\n      var lexer2 = new _Lexer(options2);\n      return lexer2.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n  }, {\n    key: \"lexInline\",\n    value: function lexInline(src, options2) {\n      var lexer2 = new _Lexer(options2);\n      return lexer2.inlineTokens(src);\n    }\n  }]);\n  return _Lexer;\n}();\n\n// src/Renderer.ts\nvar _Renderer = /*#__PURE__*/function () {\n  function _Renderer(options2) {\n    _classCallCheck(this, _Renderer);\n    this.options = options2 || _defaults;\n  }\n  _createClass(_Renderer, [{\n    key: \"code\",\n    value: function code(_code, infostring, escaped) {\n      var lang = (infostring || \"\").match(/\\S*/)[0];\n      if (this.options.highlight) {\n        var out = this.options.highlight(_code, lang);\n        if (out != null && out !== _code) {\n          escaped = true;\n          _code = out;\n        }\n      }\n      _code = _code.replace(/\\n$/, \"\") + \"\\n\";\n      if (!lang) {\n        return \"<pre><code>\" + (escaped ? _code : _escape(_code, true)) + \"</code></pre>\\n\";\n      }\n      return '<pre><code class=\"' + this.options.langPrefix + _escape(lang) + '\">' + (escaped ? _code : _escape(_code, true)) + \"</code></pre>\\n\";\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(quote) {\n      return \"<blockquote>\\n\".concat(quote, \"</blockquote>\\n\");\n    }\n  }, {\n    key: \"html\",\n    value: function html(_html, block2) {\n      return _html;\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(text, level, raw, slugger) {\n      if (this.options.headerIds) {\n        var id = this.options.headerPrefix + slugger.slug(raw);\n        return \"<h\".concat(level, \" id=\\\"\").concat(id, \"\\\">\").concat(text, \"</h\").concat(level, \">\\n\");\n      }\n      return \"<h\".concat(level, \">\").concat(text, \"</h\").concat(level, \">\\n\");\n    }\n  }, {\n    key: \"hr\",\n    value: function hr() {\n      return this.options.xhtml ? \"<hr/>\\n\" : \"<hr>\\n\";\n    }\n  }, {\n    key: \"list\",\n    value: function list(body, ordered, start) {\n      var type = ordered ? \"ol\" : \"ul\",\n        startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : \"\";\n      return \"<\" + type + startatt + \">\\n\" + body + \"</\" + type + \">\\n\";\n    }\n  }, {\n    key: \"listitem\",\n    value: function listitem(text, task, checked) {\n      return \"<li>\".concat(text, \"</li>\\n\");\n    }\n  }, {\n    key: \"checkbox\",\n    value: function checkbox(checked) {\n      return \"<input \" + (checked ? 'checked=\"\" ' : \"\") + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? \" /\" : \"\") + \"> \";\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(text) {\n      return \"<p>\".concat(text, \"</p>\\n\");\n    }\n  }, {\n    key: \"table\",\n    value: function table(header, body) {\n      if (body) body = \"<tbody>\".concat(body, \"</tbody>\");\n      return \"<table>\\n<thead>\\n\" + header + \"</thead>\\n\" + body + \"</table>\\n\";\n    }\n  }, {\n    key: \"tablerow\",\n    value: function tablerow(content) {\n      return \"<tr>\\n\".concat(content, \"</tr>\\n\");\n    }\n  }, {\n    key: \"tablecell\",\n    value: function tablecell(content, flags) {\n      var type = flags.header ? \"th\" : \"td\";\n      var tag = flags.align ? \"<\".concat(type, \" align=\\\"\").concat(flags.align, \"\\\">\") : \"<\".concat(type, \">\");\n      return tag + content + \"</\".concat(type, \">\\n\");\n    }\n    /**\n     * span level renderer\n     */\n  }, {\n    key: \"strong\",\n    value: function strong(text) {\n      return \"<strong>\".concat(text, \"</strong>\");\n    }\n  }, {\n    key: \"em\",\n    value: function em(text) {\n      return \"<em>\".concat(text, \"</em>\");\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(text) {\n      return \"<code>\".concat(text, \"</code>\");\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return this.options.xhtml ? \"<br/>\" : \"<br>\";\n    }\n  }, {\n    key: \"del\",\n    value: function del(text) {\n      return \"<del>\".concat(text, \"</del>\");\n    }\n  }, {\n    key: \"link\",\n    value: function link(href, title, text) {\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n      if (href === null) {\n        return text;\n      }\n      var out = '<a href=\"' + href + '\"';\n      if (title) {\n        out += ' title=\"' + title + '\"';\n      }\n      out += \">\" + text + \"</a>\";\n      return out;\n    }\n  }, {\n    key: \"image\",\n    value: function image(href, title, text) {\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n      if (href === null) {\n        return text;\n      }\n      var out = \"<img src=\\\"\".concat(href, \"\\\" alt=\\\"\").concat(text, \"\\\"\");\n      if (title) {\n        out += \" title=\\\"\".concat(title, \"\\\"\");\n      }\n      out += this.options.xhtml ? \"/>\" : \">\";\n      return out;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_text) {\n      return _text;\n    }\n  }]);\n  return _Renderer;\n}();\n\n// src/TextRenderer.ts\nvar _TextRenderer = /*#__PURE__*/function () {\n  function _TextRenderer() {\n    _classCallCheck(this, _TextRenderer);\n  }\n  _createClass(_TextRenderer, [{\n    key: \"strong\",\n    value:\n    // no need for block level renderers\n    function strong(text) {\n      return text;\n    }\n  }, {\n    key: \"em\",\n    value: function em(text) {\n      return text;\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(text) {\n      return text;\n    }\n  }, {\n    key: \"del\",\n    value: function del(text) {\n      return text;\n    }\n  }, {\n    key: \"html\",\n    value: function html(text) {\n      return text;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_text2) {\n      return _text2;\n    }\n  }, {\n    key: \"link\",\n    value: function link(href, title, text) {\n      return \"\" + text;\n    }\n  }, {\n    key: \"image\",\n    value: function image(href, title, text) {\n      return \"\" + text;\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return \"\";\n    }\n  }]);\n  return _TextRenderer;\n}();\n\n// src/Slugger.ts\nvar _Slugger = /*#__PURE__*/function () {\n  function _Slugger() {\n    _classCallCheck(this, _Slugger);\n    this.seen = {};\n  }\n  _createClass(_Slugger, [{\n    key: \"serialize\",\n    value: function serialize(value) {\n      return value.toLowerCase().trim().replace(/<[!\\/a-z].*?>/ig, \"\").replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, \"\").replace(/\\s/g, \"-\");\n    }\n    /**\n     * Finds the next safe (unique) slug to use\n     */\n  }, {\n    key: \"getNextSafeSlug\",\n    value: function getNextSafeSlug(originalSlug, isDryRun) {\n      var slug = originalSlug;\n      var occurenceAccumulator = 0;\n      if (this.seen.hasOwnProperty(slug)) {\n        occurenceAccumulator = this.seen[originalSlug];\n        do {\n          occurenceAccumulator++;\n          slug = originalSlug + \"-\" + occurenceAccumulator;\n        } while (this.seen.hasOwnProperty(slug));\n      }\n      if (!isDryRun) {\n        this.seen[originalSlug] = occurenceAccumulator;\n        this.seen[slug] = 0;\n      }\n      return slug;\n    }\n    /**\n     * Convert string to unique id\n     */\n  }, {\n    key: \"slug\",\n    value: function slug(value) {\n      var options2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var slug = this.serialize(value);\n      return this.getNextSafeSlug(slug, options2.dryrun);\n    }\n  }]);\n  return _Slugger;\n}();\n\n// src/Parser.ts\nvar _Parser = /*#__PURE__*/function () {\n  function _Parser(options2) {\n    _classCallCheck(this, _Parser);\n    this.options = options2 || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new _TextRenderer();\n    this.slugger = new _Slugger();\n  }\n  /**\n   * Static Parse Method\n   */\n  _createClass(_Parser, [{\n    key: \"parse\",\n    value:\n    /**\n     * Parse Loop\n     */\n    function parse(tokens) {\n      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var out = \"\",\n        i,\n        j,\n        k,\n        l2,\n        l3,\n        row,\n        cell,\n        header,\n        body,\n        token,\n        ordered,\n        start,\n        loose,\n        itemBody,\n        item,\n        checked,\n        task,\n        checkbox,\n        ret;\n      var l = tokens.length;\n      for (i = 0; i < l; i++) {\n        token = tokens[i];\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n          ret = this.options.extensions.renderers[token.type].call({\n            parser: this\n          }, token);\n          if (ret !== false || ![\"space\", \"hr\", \"heading\", \"code\", \"table\", \"blockquote\", \"list\", \"html\", \"paragraph\", \"text\"].includes(token.type)) {\n            out += ret || \"\";\n            continue;\n          }\n        }\n        switch (token.type) {\n          case \"space\":\n            {\n              continue;\n            }\n          case \"hr\":\n            {\n              out += this.renderer.hr();\n              continue;\n            }\n          case \"heading\":\n            {\n              out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n              continue;\n            }\n          case \"code\":\n            {\n              out += this.renderer.code(token.text, token.lang, !!token.escaped);\n              continue;\n            }\n          case \"table\":\n            {\n              header = \"\";\n              cell = \"\";\n              l2 = token.header.length;\n              for (j = 0; j < l2; j++) {\n                cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                  header: true,\n                  align: token.align[j]\n                });\n              }\n              header += this.renderer.tablerow(cell);\n              body = \"\";\n              l2 = token.rows.length;\n              for (j = 0; j < l2; j++) {\n                row = token.rows[j];\n                cell = \"\";\n                l3 = row.length;\n                for (k = 0; k < l3; k++) {\n                  cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                    header: false,\n                    align: token.align[k]\n                  });\n                }\n                body += this.renderer.tablerow(cell);\n              }\n              out += this.renderer.table(header, body);\n              continue;\n            }\n          case \"blockquote\":\n            {\n              body = this.parse(token.tokens);\n              out += this.renderer.blockquote(body);\n              continue;\n            }\n          case \"list\":\n            {\n              ordered = token.ordered;\n              start = token.start;\n              loose = token.loose;\n              l2 = token.items.length;\n              body = \"\";\n              for (j = 0; j < l2; j++) {\n                item = token.items[j];\n                checked = item.checked;\n                task = item.task;\n                itemBody = \"\";\n                if (item.task) {\n                  checkbox = this.renderer.checkbox(!!checked);\n                  if (loose) {\n                    if (item.tokens.length > 0 && item.tokens[0].type === \"paragraph\") {\n                      item.tokens[0].text = checkbox + \" \" + item.tokens[0].text;\n                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === \"text\") {\n                        item.tokens[0].tokens[0].text = checkbox + \" \" + item.tokens[0].tokens[0].text;\n                      }\n                    } else {\n                      item.tokens.unshift({\n                        type: \"text\",\n                        text: checkbox\n                      });\n                    }\n                  } else {\n                    itemBody += checkbox;\n                  }\n                }\n                itemBody += this.parse(item.tokens, loose);\n                body += this.renderer.listitem(itemBody, task, !!checked);\n              }\n              out += this.renderer.list(body, ordered, start);\n              continue;\n            }\n          case \"html\":\n            {\n              out += this.renderer.html(token.text, token.block);\n              continue;\n            }\n          case \"paragraph\":\n            {\n              out += this.renderer.paragraph(this.parseInline(token.tokens));\n              continue;\n            }\n          case \"text\":\n            {\n              body = token.tokens ? this.parseInline(token.tokens) : token.text;\n              while (i + 1 < l && tokens[i + 1].type === \"text\") {\n                token = tokens[++i];\n                body += \"\\n\" + (token.tokens ? this.parseInline(token.tokens) : token.text);\n              }\n              out += top ? this.renderer.paragraph(body) : body;\n              continue;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return \"\";\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens, renderer) {\n      renderer = renderer || this.renderer;\n      var out = \"\",\n        i,\n        token,\n        ret;\n      var l = tokens.length;\n      for (i = 0; i < l; i++) {\n        token = tokens[i];\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n          ret = this.options.extensions.renderers[token.type].call({\n            parser: this\n          }, token);\n          if (ret !== false || ![\"escape\", \"html\", \"link\", \"image\", \"strong\", \"em\", \"codespan\", \"br\", \"del\", \"text\"].includes(token.type)) {\n            out += ret || \"\";\n            continue;\n          }\n        }\n        switch (token.type) {\n          case \"escape\":\n            {\n              out += renderer.text(token.text);\n              break;\n            }\n          case \"html\":\n            {\n              out += renderer.html(token.text);\n              break;\n            }\n          case \"link\":\n            {\n              out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case \"image\":\n            {\n              out += renderer.image(token.href, token.title, token.text);\n              break;\n            }\n          case \"strong\":\n            {\n              out += renderer.strong(this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case \"em\":\n            {\n              out += renderer.em(this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case \"codespan\":\n            {\n              out += renderer.codespan(token.text);\n              break;\n            }\n          case \"br\":\n            {\n              out += renderer.br();\n              break;\n            }\n          case \"del\":\n            {\n              out += renderer.del(this.parseInline(token.tokens, renderer));\n              break;\n            }\n          case \"text\":\n            {\n              out += renderer.text(token.text);\n              break;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return \"\";\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(tokens, options2) {\n      var parser2 = new _Parser(options2);\n      return parser2.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens, options2) {\n      var parser2 = new _Parser(options2);\n      return parser2.parseInline(tokens);\n    }\n  }]);\n  return _Parser;\n}();\n\n// src/Hooks.ts\nvar _Hooks = /*#__PURE__*/function () {\n  function _Hooks(options2) {\n    _classCallCheck(this, _Hooks);\n    this.options = options2 || _defaults;\n  }\n  /**\n   * Process markdown before marked\n   */\n  _createClass(_Hooks, [{\n    key: \"preprocess\",\n    value: function preprocess(markdown) {\n      return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n  }, {\n    key: \"postprocess\",\n    value: function postprocess(html) {\n      return html;\n    }\n  }]);\n  return _Hooks;\n}();\n_Hooks.passThroughHooks = /* @__PURE__ */new Set([\"preprocess\", \"postprocess\"]);\n\n// src/Instance.ts\nvar _parseMarkdown, parseMarkdown_fn, _onError, onError_fn;\nvar Marked = /*#__PURE__*/function () {\n  function Marked() {\n    _classCallCheck(this, Marked);\n    __privateAdd(this, _parseMarkdown);\n    __privateAdd(this, _onError);\n    this.defaults = _getDefaults();\n    this.options = this.setOptions;\n    this.parse = __privateMethod(this, _parseMarkdown, parseMarkdown_fn).call(this, _Lexer.lex, _Parser.parse);\n    this.parseInline = __privateMethod(this, _parseMarkdown, parseMarkdown_fn).call(this, _Lexer.lexInline, _Parser.parseInline);\n    this.Parser = _Parser;\n    this.parser = _Parser.parse;\n    this.Renderer = _Renderer;\n    this.TextRenderer = _TextRenderer;\n    this.Lexer = _Lexer;\n    this.lexer = _Lexer.lex;\n    this.Tokenizer = _Tokenizer;\n    this.Slugger = _Slugger;\n    this.Hooks = _Hooks;\n    this.use.apply(this, arguments);\n  }\n  /**\n   * Run callback for every token\n   */\n  _createClass(Marked, [{\n    key: \"walkTokens\",\n    value: function walkTokens(tokens, callback) {\n      var _this3 = this;\n      var values = [];\n      var _iterator = _createForOfIteratorHelper(tokens),\n        _step;\n      try {\n        var _loop3 = function _loop3() {\n          var token = _step.value;\n          values = values.concat(callback.call(_this3, token));\n          switch (token.type) {\n            case \"table\":\n              {\n                var _iterator2 = _createForOfIteratorHelper(token.header),\n                  _step2;\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    var cell = _step2.value;\n                    values = values.concat(_this3.walkTokens(cell.tokens, callback));\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n                var _iterator3 = _createForOfIteratorHelper(token.rows),\n                  _step3;\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    var row = _step3.value;\n                    var _iterator4 = _createForOfIteratorHelper(row),\n                      _step4;\n                    try {\n                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                        var _cell = _step4.value;\n                        values = values.concat(_this3.walkTokens(_cell.tokens, callback));\n                      }\n                    } catch (err) {\n                      _iterator4.e(err);\n                    } finally {\n                      _iterator4.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n                break;\n              }\n            case \"list\":\n              {\n                values = values.concat(_this3.walkTokens(token.items, callback));\n                break;\n              }\n            default:\n              {\n                if (_this3.defaults.extensions && _this3.defaults.extensions.childTokens && _this3.defaults.extensions.childTokens[token.type]) {\n                  _this3.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {\n                    values = values.concat(_this3.walkTokens(token[childTokens], callback));\n                  });\n                } else if (token.tokens) {\n                  values = values.concat(_this3.walkTokens(token.tokens, callback));\n                }\n              }\n          }\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop3();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return values;\n    }\n  }, {\n    key: \"use\",\n    value: function use() {\n      var _this4 = this;\n      var extensions = this.defaults.extensions || {\n        renderers: {},\n        childTokens: {}\n      };\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.forEach(function (pack) {\n        var opts = _objectSpread({}, pack);\n        opts.async = _this4.defaults.async || opts.async || false;\n        if (pack.extensions) {\n          pack.extensions.forEach(function (ext) {\n            if (!ext.name) {\n              throw new Error(\"extension name required\");\n            }\n            if (\"renderer\" in ext) {\n              var prevRenderer = extensions.renderers[ext.name];\n              if (prevRenderer) {\n                extensions.renderers[ext.name] = function () {\n                  for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                    args2[_key2] = arguments[_key2];\n                  }\n                  var ret = ext.renderer.apply(this, args2);\n                  if (ret === false) {\n                    ret = prevRenderer.apply(this, args2);\n                  }\n                  return ret;\n                };\n              } else {\n                extensions.renderers[ext.name] = ext.renderer;\n              }\n            }\n            if (\"tokenizer\" in ext) {\n              if (!ext.level || ext.level !== \"block\" && ext.level !== \"inline\") {\n                throw new Error(\"extension level must be 'block' or 'inline'\");\n              }\n              if (extensions[ext.level]) {\n                extensions[ext.level].unshift(ext.tokenizer);\n              } else {\n                extensions[ext.level] = [ext.tokenizer];\n              }\n              if (ext.start) {\n                if (ext.level === \"block\") {\n                  if (extensions.startBlock) {\n                    extensions.startBlock.push(ext.start);\n                  } else {\n                    extensions.startBlock = [ext.start];\n                  }\n                } else if (ext.level === \"inline\") {\n                  if (extensions.startInline) {\n                    extensions.startInline.push(ext.start);\n                  } else {\n                    extensions.startInline = [ext.start];\n                  }\n                }\n              }\n            }\n            if (\"childTokens\" in ext && ext.childTokens) {\n              extensions.childTokens[ext.name] = ext.childTokens;\n            }\n          });\n          opts.extensions = extensions;\n        }\n        if (pack.renderer) {\n          var renderer = _this4.defaults.renderer || new _Renderer(_this4.defaults);\n          var _loop4 = function _loop4(prop) {\n            var prevRenderer = renderer[prop];\n            renderer[prop] = function () {\n              for (var _len3 = arguments.length, args2 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args2[_key3] = arguments[_key3];\n              }\n              var ret = pack.renderer[prop].apply(renderer, args2);\n              if (ret === false) {\n                ret = prevRenderer.apply(renderer, args2);\n              }\n              return ret;\n            };\n          };\n          for (var prop in pack.renderer) {\n            _loop4(prop);\n          }\n          opts.renderer = renderer;\n        }\n        if (pack.tokenizer) {\n          var tokenizer = _this4.defaults.tokenizer || new _Tokenizer(_this4.defaults);\n          var _loop5 = function _loop5(_prop) {\n            var prevTokenizer = tokenizer[_prop];\n            tokenizer[_prop] = function () {\n              for (var _len4 = arguments.length, args2 = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n                args2[_key4] = arguments[_key4];\n              }\n              var ret = pack.tokenizer[_prop].apply(tokenizer, args2);\n              if (ret === false) {\n                ret = prevTokenizer.apply(tokenizer, args2);\n              }\n              return ret;\n            };\n          };\n          for (var _prop in pack.tokenizer) {\n            _loop5(_prop);\n          }\n          opts.tokenizer = tokenizer;\n        }\n        if (pack.hooks) {\n          var hooks = _this4.defaults.hooks || new _Hooks();\n          var _loop6 = function _loop6(_prop2) {\n            var prevHook = hooks[_prop2];\n            if (_Hooks.passThroughHooks.has(_prop2)) {\n              hooks[_prop2] = function (arg) {\n                if (_this4.defaults.async) {\n                  return Promise.resolve(pack.hooks[_prop2].call(hooks, arg)).then(function (ret2) {\n                    return prevHook.call(hooks, ret2);\n                  });\n                }\n                var ret = pack.hooks[_prop2].call(hooks, arg);\n                return prevHook.call(hooks, ret);\n              };\n            } else {\n              hooks[_prop2] = function () {\n                for (var _len5 = arguments.length, args2 = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                  args2[_key5] = arguments[_key5];\n                }\n                var ret = pack.hooks[_prop2].apply(hooks, args2);\n                if (ret === false) {\n                  ret = prevHook.apply(hooks, args2);\n                }\n                return ret;\n              };\n            }\n          };\n          for (var _prop2 in pack.hooks) {\n            _loop6(_prop2);\n          }\n          opts.hooks = hooks;\n        }\n        if (pack.walkTokens) {\n          var walkTokens2 = _this4.defaults.walkTokens;\n          opts.walkTokens = function (token) {\n            var values = [];\n            values.push(pack.walkTokens.call(this, token));\n            if (walkTokens2) {\n              values = values.concat(walkTokens2.call(this, token));\n            }\n            return values;\n          };\n        }\n        _this4.defaults = _objectSpread(_objectSpread({}, _this4.defaults), opts);\n      });\n      return this;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(opt) {\n      this.defaults = _objectSpread(_objectSpread({}, this.defaults), opt);\n      return this;\n    }\n  }]);\n  return Marked;\n}();\n_parseMarkdown = new WeakSet();\nparseMarkdown_fn = function parseMarkdown_fn(lexer2, parser2) {\n  var _this5 = this;\n  return function (src, optOrCallback, callback) {\n    if (typeof optOrCallback === \"function\") {\n      callback = optOrCallback;\n      optOrCallback = null;\n    }\n    var origOpt = _objectSpread({}, optOrCallback);\n    var opt = _objectSpread(_objectSpread({}, _this5.defaults), origOpt);\n    var throwError = __privateMethod(_this5, _onError, onError_fn).call(_this5, !!opt.silent, !!opt.async, callback);\n    if (typeof src === \"undefined\" || src === null) {\n      return throwError(new Error(\"marked(): input parameter is undefined or null\"));\n    }\n    if (typeof src !== \"string\") {\n      return throwError(new Error(\"marked(): input parameter is of type \" + Object.prototype.toString.call(src) + \", string expected\"));\n    }\n    checkDeprecations(opt, callback);\n    if (opt.hooks) {\n      opt.hooks.options = opt;\n    }\n    if (callback) {\n      var highlight = opt.highlight;\n      var tokens;\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        tokens = lexer2(src, opt);\n      } catch (e) {\n        return throwError(e);\n      }\n      var done = function done(err) {\n        var out;\n        if (!err) {\n          try {\n            if (opt.walkTokens) {\n              _this5.walkTokens(tokens, opt.walkTokens);\n            }\n            out = parser2(tokens, opt);\n            if (opt.hooks) {\n              out = opt.hooks.postprocess(out);\n            }\n          } catch (e) {\n            err = e;\n          }\n        }\n        opt.highlight = highlight;\n        return err ? throwError(err) : callback(null, out);\n      };\n      if (!highlight || highlight.length < 3) {\n        return done();\n      }\n      delete opt.highlight;\n      if (!tokens.length) return done();\n      var pending = 0;\n      _this5.walkTokens(tokens, function (token) {\n        if (token.type === \"code\") {\n          pending++;\n          setTimeout(function () {\n            highlight(token.text, token.lang, function (err, code) {\n              if (err) {\n                return done(err);\n              }\n              if (code != null && code !== token.text) {\n                token.text = code;\n                token.escaped = true;\n              }\n              pending--;\n              if (pending === 0) {\n                done();\n              }\n            });\n          }, 0);\n        }\n      });\n      if (pending === 0) {\n        done();\n      }\n      return;\n    }\n    if (opt.async) {\n      return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(function (src2) {\n        return lexer2(src2, opt);\n      }).then(function (tokens) {\n        return opt.walkTokens ? Promise.all(_this5.walkTokens(tokens, opt.walkTokens)).then(function () {\n          return tokens;\n        }) : tokens;\n      }).then(function (tokens) {\n        return parser2(tokens, opt);\n      }).then(function (html) {\n        return opt.hooks ? opt.hooks.postprocess(html) : html;\n      }).catch(throwError);\n    }\n    try {\n      if (opt.hooks) {\n        src = opt.hooks.preprocess(src);\n      }\n      var _tokens = lexer2(src, opt);\n      if (opt.walkTokens) {\n        _this5.walkTokens(_tokens, opt.walkTokens);\n      }\n      var html = parser2(_tokens, opt);\n      if (opt.hooks) {\n        html = opt.hooks.postprocess(html);\n      }\n      return html;\n    } catch (e) {\n      return throwError(e);\n    }\n  };\n};\n_onError = new WeakSet();\nonError_fn = function onError_fn(silent, async, callback) {\n  return function (e) {\n    e.message += \"\\nPlease report this to https://github.com/markedjs/marked.\";\n    if (silent) {\n      var msg = \"<p>An error occurred:</p><pre>\" + _escape(e.message + \"\", true) + \"</pre>\";\n      if (async) {\n        return Promise.resolve(msg);\n      }\n      if (callback) {\n        callback(null, msg);\n        return;\n      }\n      return msg;\n    }\n    if (async) {\n      return Promise.reject(e);\n    }\n    if (callback) {\n      callback(e);\n      return;\n    }\n    throw e;\n  };\n};\n\n// src/marked.ts\nvar markedInstance = new Marked();\nfunction marked(src, opt, callback) {\n  return markedInstance.parse(src, opt, callback);\n}\nmarked.options = marked.setOptions = function (options2) {\n  markedInstance.setOptions(options2);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\nmarked.use = function () {\n  markedInstance.use.apply(markedInstance, arguments);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.walkTokens = function (tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\nmarked.parseInline = markedInstance.parseInline;\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Slugger = _Slugger;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = _Parser.parse;\nvar lexer = _Lexer.lex;\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _Slugger as Slugger, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["_getDefaults","async","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","hooks","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartypants","tokenizer","walkTokens","xhtml","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","getRegex","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","level","checkDeprecations","callback","console","warn","outputLink","cap","link","raw","lexer2","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","_matchIndentInNode","_slicedToArray","indentInNode","join","_Tokenizer","options2","_classCallCheck","options","_createClass","key","value","space","src","rules","block","newline","code","codeBlockStyle","fences","lang","inline","_escapes","heading","trimmed","depth","lexer","hr","blockquote","top","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","concat","itemRegex","t","repeat","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","spacers","filter","hasMultipleLineBreaks","some","pre","paragraph","def","tag","table","item","header","align","rows","j","k","lheading","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","arguments","undefined","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","text2","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","mangle2","url","prevCapZero","_backpedal","inlineText","smartypants2","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","_objectSpread","reflinkSearch","_punctuation","blockSkip","anyPunctuation","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","_Lexer","Object","create","inlineQueue","lex","next","_this","leading","tabs","lastToken","cutSrc","lastParagraphClipped","_loop","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","_ret","_this2","keepPrevChar","keys","includes","lastIndexOf","_loop2","startInline","_ret2","get","lexInline","_Renderer","infostring","quote","block2","slugger","id","slug","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","image","_TextRenderer","_Slugger","seen","serialize","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","hasOwnProperty","dryrun","_Parser","textRenderer","parse","l2","l3","cell","itemBody","ret","renderers","parser","parseInline","unshift","parser2","_Hooks","preprocess","markdown","postprocess","passThroughHooks","Set","_parseMarkdown","parseMarkdown_fn","_onError","onError_fn","Marked","__privateAdd","defaults","setOptions","__privateMethod","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Slugger","Hooks","use","apply","_this3","values","_iterator","_createForOfIteratorHelper","_step","_loop3","_iterator2","_step2","s","done","err","f","_iterator3","_step3","_iterator4","_step4","childTokens","_this4","_len","args","Array","_key","pack","opts","ext","prevRenderer","_len2","args2","_key2","_loop4","prop","_len3","_key3","_loop5","_prop","prevTokenizer","_len4","_key4","_loop6","_prop2","prevHook","has","arg","Promise","resolve","then","ret2","_len5","_key5","walkTokens2","WeakSet","_this5","optOrCallback","origOpt","throwError","prototype","pending","setTimeout","src2","all","catch","message","msg","reject","markedInstance","marked","getDefaults"],"sources":["/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/marked/src/defaults.ts","/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/marked/src/helpers.ts","/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/marked/src/Tokenizer.ts","/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/marked/src/rules.ts","/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/marked/src/Lexer.ts","/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/marked/src/Renderer.ts","/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/marked/src/TextRenderer.ts","/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/marked/src/Slugger.ts","/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/marked/src/Parser.ts","/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/marked/src/Hooks.ts","/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/marked/src/Instance.ts","/Users/jessicad/Documents/PROJECTS/markdown-previewer/node_modules/marked/src/marked.ts"],"sourcesContent":["import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults(): MarkedOptions {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nexport let _defaults = _getDefaults();\n\nexport function changeDefaults(newDefaults: MarkedOptions) {\n  _defaults = newDefaults;\n}\n","import type { MarkedOptions } from './MarkedOptions.ts';\nimport type { ResultCallback } from './marked.ts';\nimport type { Rule } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\nexport function edit(regex: Rule, opt?: string) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      val = typeof val === 'object' && 'source' in val ? val.source : val;\n      val = val.replace(caret, '$1');\n      regex = (regex as string).replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nexport function cleanUrl(sanitize: boolean | undefined, base: string | undefined | null, href: string) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls: Record<string, string> = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\nexport function resolveUrl(base: string, href: string) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nexport const noopTest = { exec: () => null };\n\nexport function splitCells(tableRow: string, count: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nexport function checkDeprecations(opt: MarkedOptions, callback?: ResultCallback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n\n  if (callback) {\n    console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n  }\n\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n\n  if (opt.highlight || opt.langPrefix !== 'language-') {\n    console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n  }\n\n  if (opt.mangle) {\n    console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\n  }\n\n  if (opt.baseUrl) {\n    console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n  }\n\n  if (opt.smartypants) {\n    console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n  }\n\n  if (opt.xhtml) {\n    console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n  }\n\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  escape,\n  findClosingBracket\n} from './helpers.ts';\nimport { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token: Tokens.Link = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw: string, text: string) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n  options: MarkedOptions;\n  rules: any;\n  lexer!: _Lexer;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [] as Tokens.ListItem[]\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t: string) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      (list.items[list.items.length - 1] as Tokens.ListItem).text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens!.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw!));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | Tokens.Paragraph | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML | Tokens.Paragraph = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        const paragraph = token as unknown as Tokens.Paragraph;\n        paragraph.type = 'paragraph';\n        paragraph.text = text;\n        paragraph.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item: Tokens.Table = {\n        type: 'table',\n        // splitCells expects a number as second argument\n        // @ts-expect-error\n        header: splitCells(cap[1]).map(c => {\n          return { text: c };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i]!)) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i]!)) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i]!)) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i] as unknown as string, item.header.length).map(c => {\n            return { text: c };\n          });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + rLength + 1);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src: string, mangle: (cap: string) => string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src: string, mangle: (cap: string) => string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src: string, smartypants: (cap: string) => string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n","import {\n  noopTest,\n  edit\n} from './helpers.ts';\n\nexport type Rule = RegExp | string;\n\nexport interface Rules {\n  [ruleName: string]: Pick<RegExp, 'exec'> | Rule | Rules;\n}\n\ntype BlockRuleNames =\n    | 'newline'\n    | 'code'\n    | 'fences'\n    | 'hr'\n    | 'heading'\n    | 'blockquote'\n    | 'list'\n    | 'html'\n    | 'def'\n    | 'lheading'\n    | '_paragraph'\n    | 'text'\n    | '_label'\n    | '_title'\n    | 'bullet'\n    | 'listItemStart'\n    | '_tag'\n    | '_comment'\n    | 'paragraph'\n    | 'uote' ;\n\ntype BlockSubRuleNames = 'normal' | 'gfm' | 'pedantic';\n\ntype InlineRuleNames =\n    | 'escape'\n    | 'autolink'\n    | 'tag'\n    | 'link'\n    | 'reflink'\n    | 'nolink'\n    | 'reflinkSearch'\n    | 'code'\n    | 'br'\n    | 'text'\n    | '_punctuation'\n    | 'punctuation'\n    | 'blockSkip'\n    | 'escapedEmSt'\n    | '_comment'\n    | '_escapes'\n    | '_scheme'\n    | '_email'\n    | '_attribute'\n    | '_label'\n    | '_href'\n    | '_title'\n    | 'strong'\n    | '_extended_email'\n    | '_backpedal';\n\ntype InlineSubRuleNames = 'gfm' | 'emStrong' | 'normal' | 'pedantic'| 'breaks';\n\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nexport const block: Record<BlockRuleNames, Rule> & Record<BlockSubRuleNames, Rules> & Rules = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.lheading = edit(block.lheading)\n  .replace(/bull/g, block.bullet) // lists can interrupt\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = { ...block };\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = {\n  ...block.normal,\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\n\nblock.gfm.table = edit(block.gfm.table as Rule)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table as RegExp) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = {\n  ...block.normal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph as Rule)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n};\n\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nexport const inline: Record<InlineRuleNames, Rule> & Record<InlineSubRuleNames, Rules> & Rules = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n};\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim as Rule, 'u')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst as Rule, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd as Rule, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.anyPunctuation = edit(inline.anyPunctuation as Rule, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = edit(inline._escapes, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = { ...inline };\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n};\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n\ninline.gfm.url = edit(inline.gfm.url as Rule, 'i')\n  .replace('email', inline.gfm._extended_email as RegExp)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text as Rule)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n};\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { block, inline } from './rules.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MarkedOptions, TokenizerExtension } from './MarkedOptions.ts';\nimport type { Rules } from './rules.ts';\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text: string) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n */\nfunction mangle(text: string) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nexport class _Lexer {\n  tokens: TokensList;\n  options: MarkedOptions;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer;\n  private inlineQueue: {src: string, tokens: Token[]}[];\n\n  constructor(options?: MarkedOptions) {\n    // TokenList cannot be created in one go\n    // @ts-expect-error\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules(): Rules {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[]): Token[];\n  blockTokens(src: string, tokens?: TokensList): TokensList;\n  blockTokens(src: string, tokens: Token[] = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer: TokenizerExtension['tokenizer']) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape\n} from './helpers.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport { Slugger } from './marked.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer {\n  options: MarkedOptions;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  code(code: string, infostring: string | undefined, escaped: boolean): string {\n    const lang = (infostring || '').match(/\\S*/)![0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote(quote: string): string {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html: string, block?: boolean) : string {\n    return html;\n  }\n\n  heading(text: string, level: number, raw: string, slugger: Slugger): string {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr(): string {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body: string, ordered: boolean, start: number | ''): string {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(text: string, task: boolean, checked: boolean): string {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked: boolean): string {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  paragraph(text: string): string {\n    return `<p>${text}</p>\\n`;\n  }\n\n  table(header: string, body: string): string {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow(content: string): string {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content: string, flags: {\n    header: boolean;\n    align: 'center' | 'left' | 'right' | null;\n  }): string {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong(text: string): string {\n    return `<strong>${text}</strong>`;\n  }\n\n  em(text: string): string {\n    return `<em>${text}</em>`;\n  }\n\n  codespan(text: string): string {\n    return `<code>${text}</code>`;\n  }\n\n  br(): string {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  del(text: string): string {\n    return `<del>${text}</del>`;\n  }\n\n  link(href: string, title: string | null | undefined, text: string): string {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href) as any;\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image(href: string, title: string | null, text: string): string {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href) as any;\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text: string) : string {\n    return text;\n  }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n  // no need for block level renderers\n  strong(text: string) {\n    return text;\n  }\n\n  em(text: string) {\n    return text;\n  }\n\n  codespan(text: string) {\n    return text;\n  }\n\n  del(text: string) {\n    return text;\n  }\n\n  html(text: string) {\n    return text;\n  }\n\n  text(text: string) {\n    return text;\n  }\n\n  link(href: string, title: string | null | undefined, text: string) {\n    return '' + text;\n  }\n\n  image(href: string, title: string | null, text: string) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n","import type { SluggerOptions } from './MarkedOptions.ts';\n\n/**\n * Slugger generates header id\n */\nexport class _Slugger {\n  seen: { [slugValue: string]: number };\n\n  constructor() {\n    this.seen = {};\n  }\n\n  serialize(value: string) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   */\n  getNextSafeSlug(originalSlug: string, isDryRun: boolean | undefined) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   */\n  slug(value: string, options: SluggerOptions = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Slugger } from './Slugger.ts';\nimport { _defaults } from './defaults.ts';\nimport {\n  unescape\n} from './helpers.ts';\nimport type { Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n  options: MarkedOptions;\n  renderer: _Renderer;\n  textRenderer: _TextRenderer;\n  slugger: _Slugger;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new _TextRenderer();\n    this.slugger = new _Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): string {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens) as string,\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer) as string),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            !!token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens)!,\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens)!,\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens)!;\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(!!checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  } as Tokens.Text);\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, !!checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token.text, token.block);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens)!);\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body!) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer?: _Renderer | _TextRenderer): string {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nexport class _Hooks {\n  options: MarkedOptions;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess'\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: string | undefined) {\n    return html;\n  }\n}\n","import { _getDefaults } from './defaults.js';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Slugger } from './Slugger.ts';\nimport {\n  checkDeprecations,\n  escape\n} from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport type ResultCallback = (error: Error | null, parseResult?: string) => undefined | void;\n\nexport class Marked {\n  defaults = _getDefaults();\n  options = this.setOptions;\n\n  parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n  parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n\n  Parser = _Parser;\n  parser = _Parser.parse;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  lexer = _Lexer.lex;\n  Tokenizer = _Tokenizer;\n  Slugger = _Slugger;\n  Hooks = _Hooks;\n\n  constructor(...args: MarkedExtension[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens <T = void>(tokens: Token[] | TokensList, callback: (token: Token) => T | T[]) {\n    let values: T[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          for (const cell of token.header) {\n            values = values.concat(this.walkTokens(cell.tokens!, callback));\n          }\n          for (const row of token.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens!, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          values = values.concat(this.walkTokens(token.items, callback));\n          break;\n        }\n        default: {\n          if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n            this.defaults.extensions.childTokens[token.type].forEach((childTokens) => {\n              values = values.concat(this.walkTokens(token[childTokens], callback));\n            });\n          } else if (token.tokens) {\n            values = values.concat(this.walkTokens(token.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension[]) {\n    const extensions: NonNullable<MarkedOptions['extensions']> = this.defaults.extensions || { renderers: {}, childTokens: {} } as NonNullable<MarkedOptions['extensions']>;\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            if (extensions[ext.level]) {\n              extensions[ext.level].unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start!);\n                } else {\n                  extensions.startBlock = [ext.start!];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start!);\n                } else {\n                  extensions.startInline = [ext.start!];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          const prevRenderer = renderer[prop];\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[prop] = (...args: unknown[]) => {\n            let ret = pack.renderer![prop].apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          const prevTokenizer = tokenizer[prop];\n          // Replace tokenizer with func to run extension, but fall back if false\n          tokenizer[prop] = (...args: unknown[]) => {\n            let ret = pack.tokenizer![prop].apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          const prevHook = hooks[prop];\n          if (_Hooks.passThroughHooks.has(prop)) {\n            hooks[prop as 'preprocess' | 'postprocess'] = (arg: string | undefined) => {\n              if (this.defaults.async) {\n                return Promise.resolve(pack.hooks![prop].call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = pack.hooks![prop].call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[prop] = (...args) => {\n              let ret = pack.hooks![prop].apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: Array<Promise<void> | void> = [];\n          values.push(pack.walkTokens!.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  #parseMarkdown(lexer: (src: string, options?: MarkedOptions) => TokensList | Token[], parser: (tokens: Token[], options?: MarkedOptions) => string | undefined) {\n    return (src: string, optOrCallback?: MarkedOptions | ResultCallback | undefined | null, callback?: ResultCallback | undefined): string | Promise<string | undefined> | undefined => {\n      if (typeof optOrCallback === 'function') {\n        callback = optOrCallback;\n        optOrCallback = null;\n      }\n\n      const origOpt = { ...optOrCallback };\n      const opt = { ...this.defaults, ...origOpt };\n      const throwError = this.#onError(!!opt.silent, !!opt.async, callback);\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      checkDeprecations(opt, callback);\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n      }\n\n      if (callback) {\n        const highlight = opt.highlight;\n        let tokens: TokensList | Token[];\n\n        try {\n          if (opt.hooks) {\n            src = opt.hooks.preprocess(src);\n          }\n          tokens = lexer(src, opt);\n        } catch (e) {\n          return throwError(e as Error);\n        }\n\n        const done = (err?: Error) => {\n          let out;\n\n          if (!err) {\n            try {\n              if (opt.walkTokens) {\n                this.walkTokens(tokens, opt.walkTokens);\n              }\n              out = parser(tokens, opt)!;\n              if (opt.hooks) {\n                out = opt.hooks.postprocess(out);\n              }\n            } catch (e) {\n              err = e as Error;\n            }\n          }\n\n          opt.highlight = highlight;\n\n          return err\n            ? throwError(err)\n            : callback!(null, out) as undefined;\n        };\n\n        if (!highlight || highlight.length < 3) {\n          return done();\n        }\n\n        delete opt.highlight;\n\n        if (!tokens.length) return done();\n\n        let pending = 0;\n        this.walkTokens(tokens, (token) => {\n          if (token.type === 'code') {\n            pending++;\n            setTimeout(() => {\n              highlight(token.text, token.lang, (err, code) => {\n                if (err) {\n                  return done(err);\n                }\n                if (code != null && code !== token.text) {\n                  token.text = code;\n                  token.escaped = true;\n                }\n\n                pending--;\n                if (pending === 0) {\n                  done();\n                }\n              });\n            }, 0);\n          }\n        });\n\n        if (pending === 0) {\n          done();\n        }\n\n        return;\n      }\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        const tokens = lexer(src, opt);\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch (e) {\n        return throwError(e as Error);\n      }\n    };\n  }\n\n  #onError(silent: boolean, async: boolean, callback?: ResultCallback) {\n    return (e: Error): string | Promise<string> | undefined => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        if (callback) {\n          callback(null, msg);\n          return;\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      if (callback) {\n        callback(e);\n        return;\n      }\n      throw e;\n    };\n  }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Slugger } from './Slugger.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport type ResultCallback = (error: Error | null, parseResult?: string) => undefined | void;\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML synchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML\n */\nexport function marked(src: string, options?: MarkedOptions): string;\n\n/**\n * Compiles markdown to HTML asynchronously with a callback.\n *\n * @param src String of markdown source to be compiled\n * @param callback Function called when the markdownString has been fully parsed when using async highlighting\n */\nexport function marked(src: string, callback: ResultCallback): void;\n\n/**\n * Compiles markdown to HTML asynchronously with a callback.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @param callback Function called when the markdownString has been fully parsed when using async highlighting\n */\nexport function marked(\n    src: string,\n    options: MarkedOptions,\n    callback: ResultCallback,\n): void;\nexport function marked(src: string, opt?: MarkedOptions | ResultCallback, callback?: ResultCallback): string | Promise<string | undefined> | undefined {\n  return markedInstance.parse(src, opt, callback);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function <T = void>(tokens: Token[] | TokensList, callback: (token: Token) => T | T[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Slugger = _Slugger;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Slugger as Slugger } from './Slugger.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './rules.ts';\nexport type * from './Tokens.ts';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}